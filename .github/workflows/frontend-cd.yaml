name: Frontend CD Workflow

on:
  push:
    branches:
      - main
    paths:
      - 'frontend/**'
  workflow_dispatch: 

env:
  ECR_REPOSITORY: 710173168288.dkr.ecr.us-east-1.amazonaws.com/frontend
  AWS_REGION: us-east-1 
  CLUSTER_NAME: cluster 
  REACT_APP_MOVIE_API_URL: https://1FF10DB68418A9687EFCA8E4951C61B0.gr7.us-east-1.eks.amazonaws.com/api?timeout=32s
jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.14.2'

      - name: Install dependencies
        run: npm install
        working-directory: frontend

      - name: Run ESLint
        run: npm run lint
        working-directory: frontend
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install
        working-directory: frontend

      - name: Run Tests
        run: npm test
        working-directory: frontend

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker Image
        run: |
          docker build --build-arg REACT_APP_MOVIE_API_URL=$REACT_APP_MOVIE_API_URL -t $ECR_REPOSITORY:$GITHUB_SHA .
          docker tag $ECR_REPOSITORY:$GITHUB_SHA $ECR_REPOSITORY:$GITHUB_SHA
        working-directory: frontend

      - name: Push Docker Image to ECR
        run: docker push $ECR_REPOSITORY:$GITHUB_SHA

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: build 
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.25.0' 
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Config kubectl
        run: aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME

      - name: Install kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          mv kustomize /usr/local/bin/

      - name: Update Kubernetes Manifests
        run: kustomize edit set image $ECR_REPOSITORY:$GITHUB_SHA
        working-directory: backend/k8s
      
      - name: Apply Kubernetes Manifests
        run: |
          kustomize build . | kubectl apply -f -
        working-directory: frontend/k8s